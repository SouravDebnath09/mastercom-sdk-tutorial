/*
 * MasterCom
 * MasterCom
 *
 * The version of the OpenAPI document: v6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mastercard.api.mastercom.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.mastercard.api.mastercom.model.DocumentStructure;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * UpdateCaseRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-02-11T16:27:04.249+05:30[Asia/Kolkata]")
public class UpdateCaseRequest {
  /**
   * Action to be performed on case.   CONDITIONAL: ESCALATE is applicable on pre compliance and pre arbitration cases.   Length: 5-8   Valid Values/Format: ACCEPT, REJECT, REBUT, ESCALATE, WITHDRAW, DOC_RETRY.
   */
  @JsonAdapter(ActionEnum.Adapter.class)
  public enum ActionEnum {
    ACCEPT("ACCEPT"),
    
    REJECT("REJECT"),
    
    REBUT("REBUT"),
    
    ESCALATE("ESCALATE"),
    
    WITHDRAW("WITHDRAW"),
    
    DOC_RETRY("DOC_RETRY");

    private String value;

    ActionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ActionEnum fromValue(String value) {
      for (ActionEnum b : ActionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ActionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ActionEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private ActionEnum action;

  public static final String SERIALIZED_NAME_FILE_ATTACHMENT = "fileAttachment";
  @SerializedName(SERIALIZED_NAME_FILE_ATTACHMENT)
  private DocumentStructure fileAttachment;

  public static final String SERIALIZED_NAME_MEMO = "memo";
  @SerializedName(SERIALIZED_NAME_MEMO)
  private String memo;

  /**
   * Rebutted as Sender or Receiver.   CONDITIONAL: This field is mandatory and applicable if the action code is REBUT.   Length: 3   Valid Values/Format: SND,REC
   */
  @JsonAdapter(RebuttedAsEnum.Adapter.class)
  public enum RebuttedAsEnum {
    SND("SND"),
    
    REC("REC");

    private String value;

    RebuttedAsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RebuttedAsEnum fromValue(String value) {
      for (RebuttedAsEnum b : RebuttedAsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RebuttedAsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RebuttedAsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RebuttedAsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RebuttedAsEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_REBUTTED_AS = "rebuttedAs";
  @SerializedName(SERIALIZED_NAME_REBUTTED_AS)
  private RebuttedAsEnum rebuttedAs;

  /**
   * Uploading document as Sender or Receiver.   CONDITIONAL: This field is mandatory and applicable, if the action code is DOC_RETRY and not applicable for any Actions.   Length: 3   Valid Values/Format: SND,REC
   */
  @JsonAdapter(DocRetryAsEnum.Adapter.class)
  public enum DocRetryAsEnum {
    SND("SND"),
    
    REC("REC");

    private String value;

    DocRetryAsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DocRetryAsEnum fromValue(String value) {
      for (DocRetryAsEnum b : DocRetryAsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DocRetryAsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DocRetryAsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DocRetryAsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DocRetryAsEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DOC_RETRY_AS = "docRetryAs";
  @SerializedName(SERIALIZED_NAME_DOC_RETRY_AS)
  private DocRetryAsEnum docRetryAs;


  public UpdateCaseRequest action(ActionEnum action) {
    
    this.action = action;
    return this;
  }

   /**
   * Action to be performed on case.   CONDITIONAL: ESCALATE is applicable on pre compliance and pre arbitration cases.   Length: 5-8   Valid Values/Format: ACCEPT, REJECT, REBUT, ESCALATE, WITHDRAW, DOC_RETRY.
   * @return action
  **/
  @ApiModelProperty(example = "REJECT", required = true, value = "Action to be performed on case.   CONDITIONAL: ESCALATE is applicable on pre compliance and pre arbitration cases.   Length: 5-8   Valid Values/Format: ACCEPT, REJECT, REBUT, ESCALATE, WITHDRAW, DOC_RETRY.")

  public ActionEnum getAction() {
    return action;
  }


  public void setAction(ActionEnum action) {
    this.action = action;
  }


  public UpdateCaseRequest fileAttachment(DocumentStructure fileAttachment) {
    
    this.fileAttachment = fileAttachment;
    return this;
  }

   /**
   * Get fileAttachment
   * @return fileAttachment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DocumentStructure getFileAttachment() {
    return fileAttachment;
  }


  public void setFileAttachment(DocumentStructure fileAttachment) {
    this.fileAttachment = fileAttachment;
  }


  public UpdateCaseRequest memo(String memo) {
    
    this.memo = memo;
    return this;
  }

   /**
   * Memo pertaining to the case.   CONDITIONAL:  This field is mandatory and applicable if the action code is ACCEPT, REJECT, REBUT or DOC_RETRY.   Length: 0-100   Valid Values/Format: Alphanumeric
   * @return memo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "This is a test memo", value = "Memo pertaining to the case.   CONDITIONAL:  This field is mandatory and applicable if the action code is ACCEPT, REJECT, REBUT or DOC_RETRY.   Length: 0-100   Valid Values/Format: Alphanumeric")

  public String getMemo() {
    return memo;
  }


  public void setMemo(String memo) {
    this.memo = memo;
  }


  public UpdateCaseRequest rebuttedAs(RebuttedAsEnum rebuttedAs) {
    
    this.rebuttedAs = rebuttedAs;
    return this;
  }

   /**
   * Rebutted as Sender or Receiver.   CONDITIONAL: This field is mandatory and applicable if the action code is REBUT.   Length: 3   Valid Values/Format: SND,REC
   * @return rebuttedAs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "SND", value = "Rebutted as Sender or Receiver.   CONDITIONAL: This field is mandatory and applicable if the action code is REBUT.   Length: 3   Valid Values/Format: SND,REC")

  public RebuttedAsEnum getRebuttedAs() {
    return rebuttedAs;
  }


  public void setRebuttedAs(RebuttedAsEnum rebuttedAs) {
    this.rebuttedAs = rebuttedAs;
  }


  public UpdateCaseRequest docRetryAs(DocRetryAsEnum docRetryAs) {
    
    this.docRetryAs = docRetryAs;
    return this;
  }

   /**
   * Uploading document as Sender or Receiver.   CONDITIONAL: This field is mandatory and applicable, if the action code is DOC_RETRY and not applicable for any Actions.   Length: 3   Valid Values/Format: SND,REC
   * @return docRetryAs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "SND", value = "Uploading document as Sender or Receiver.   CONDITIONAL: This field is mandatory and applicable, if the action code is DOC_RETRY and not applicable for any Actions.   Length: 3   Valid Values/Format: SND,REC")

  public DocRetryAsEnum getDocRetryAs() {
    return docRetryAs;
  }


  public void setDocRetryAs(DocRetryAsEnum docRetryAs) {
    this.docRetryAs = docRetryAs;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateCaseRequest updateCaseRequest = (UpdateCaseRequest) o;
    return Objects.equals(this.action, updateCaseRequest.action) &&
        Objects.equals(this.fileAttachment, updateCaseRequest.fileAttachment) &&
        Objects.equals(this.memo, updateCaseRequest.memo) &&
        Objects.equals(this.rebuttedAs, updateCaseRequest.rebuttedAs) &&
        Objects.equals(this.docRetryAs, updateCaseRequest.docRetryAs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, fileAttachment, memo, rebuttedAs, docRetryAs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateCaseRequest {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    fileAttachment: ").append(toIndentedString(fileAttachment)).append("\n");
    sb.append("    memo: ").append(toIndentedString(memo)).append("\n");
    sb.append("    rebuttedAs: ").append(toIndentedString(rebuttedAs)).append("\n");
    sb.append("    docRetryAs: ").append(toIndentedString(docRetryAs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

