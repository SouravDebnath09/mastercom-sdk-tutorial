/*
 * MasterCom
 * MasterCom
 *
 * The version of the OpenAPI document: v6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mastercard.api.mastercom.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * UpdateClaimRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-02-11T16:27:04.249+05:30[Asia/Kolkata]")
public class UpdateClaimRequest {
  public static final String SERIALIZED_NAME_OPEN_CLAIM_DUE_DATE = "openClaimDueDate";
  @SerializedName(SERIALIZED_NAME_OPEN_CLAIM_DUE_DATE)
  private String openClaimDueDate;

  /**
   * Action to perform on claim.   Length: 5-6   Valid Values/Format: REOPEN, CLOSE
   */
  @JsonAdapter(ActionEnum.Adapter.class)
  public enum ActionEnum {
    REOPEN("REOPEN"),
    
    CLOSE("CLOSE");

    private String value;

    ActionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ActionEnum fromValue(String value) {
      for (ActionEnum b : ActionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ActionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ActionEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private ActionEnum action;

  /**
   * Reason code for closing the claim.   Length: 2   Valid Values/Format: 10, 20, 30, 40
   */
  @JsonAdapter(CloseClaimReasonCodeEnum.Adapter.class)
  public enum CloseClaimReasonCodeEnum {
    _10("10"),
    
    _20("20"),
    
    _30("30"),
    
    _40("40");

    private String value;

    CloseClaimReasonCodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CloseClaimReasonCodeEnum fromValue(String value) {
      for (CloseClaimReasonCodeEnum b : CloseClaimReasonCodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CloseClaimReasonCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CloseClaimReasonCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CloseClaimReasonCodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CloseClaimReasonCodeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CLOSE_CLAIM_REASON_CODE = "closeClaimReasonCode";
  @SerializedName(SERIALIZED_NAME_CLOSE_CLAIM_REASON_CODE)
  private CloseClaimReasonCodeEnum closeClaimReasonCode;


  public UpdateClaimRequest openClaimDueDate(String openClaimDueDate) {
    
    this.openClaimDueDate = openClaimDueDate;
    return this;
  }

   /**
   * The due date for opening the claim.   Length: 10   Valid Values/Format: Date (yyyy-MM-dd)
   * @return openClaimDueDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2021-02-20", value = "The due date for opening the claim.   Length: 10   Valid Values/Format: Date (yyyy-MM-dd)")

  public String getOpenClaimDueDate() {
    return openClaimDueDate;
  }


  public void setOpenClaimDueDate(String openClaimDueDate) {
    this.openClaimDueDate = openClaimDueDate;
  }


  public UpdateClaimRequest action(ActionEnum action) {
    
    this.action = action;
    return this;
  }

   /**
   * Action to perform on claim.   Length: 5-6   Valid Values/Format: REOPEN, CLOSE
   * @return action
  **/
  @ApiModelProperty(example = "CLOSE", required = true, value = "Action to perform on claim.   Length: 5-6   Valid Values/Format: REOPEN, CLOSE")

  public ActionEnum getAction() {
    return action;
  }


  public void setAction(ActionEnum action) {
    this.action = action;
  }


  public UpdateClaimRequest closeClaimReasonCode(CloseClaimReasonCodeEnum closeClaimReasonCode) {
    
    this.closeClaimReasonCode = closeClaimReasonCode;
    return this;
  }

   /**
   * Reason code for closing the claim.   Length: 2   Valid Values/Format: 10, 20, 30, 40
   * @return closeClaimReasonCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "10", value = "Reason code for closing the claim.   Length: 2   Valid Values/Format: 10, 20, 30, 40")

  public CloseClaimReasonCodeEnum getCloseClaimReasonCode() {
    return closeClaimReasonCode;
  }


  public void setCloseClaimReasonCode(CloseClaimReasonCodeEnum closeClaimReasonCode) {
    this.closeClaimReasonCode = closeClaimReasonCode;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateClaimRequest updateClaimRequest = (UpdateClaimRequest) o;
    return Objects.equals(this.openClaimDueDate, updateClaimRequest.openClaimDueDate) &&
        Objects.equals(this.action, updateClaimRequest.action) &&
        Objects.equals(this.closeClaimReasonCode, updateClaimRequest.closeClaimReasonCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(openClaimDueDate, action, closeClaimReasonCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateClaimRequest {\n");
    sb.append("    openClaimDueDate: ").append(toIndentedString(openClaimDueDate)).append("\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    closeClaimReasonCode: ").append(toIndentedString(closeClaimReasonCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

