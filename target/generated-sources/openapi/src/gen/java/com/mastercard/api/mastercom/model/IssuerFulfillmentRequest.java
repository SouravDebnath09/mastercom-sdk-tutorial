/*
 * MasterCom
 * MasterCom
 *
 * The version of the OpenAPI document: v6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mastercard.api.mastercom.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * IssuerFulfillmentRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-02-11T16:27:04.249+05:30[Asia/Kolkata]")
public class IssuerFulfillmentRequest {
  public static final String SERIALIZED_NAME_MEMO = "memo";
  @SerializedName(SERIALIZED_NAME_MEMO)
  private String memo;

  /**
   * Issuer Response Code.   Length: 7-36   Valid Values/Format: APPROVE, REJECT_DOCUMENTATION_NOT_AS_REQUIRED, REJECT_ILLEGIBLE_OR_MISSING
   */
  @JsonAdapter(IssuerResponseCdEnum.Adapter.class)
  public enum IssuerResponseCdEnum {
    APPROVE("APPROVE"),
    
    REJECT_DOCUMENTATION_NOT_AS_REQUIRED("REJECT_DOCUMENTATION_NOT_AS_REQUIRED"),
    
    REJECT_ILLEGIBLE_OR_MISSING("REJECT_ILLEGIBLE_OR_MISSING");

    private String value;

    IssuerResponseCdEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IssuerResponseCdEnum fromValue(String value) {
      for (IssuerResponseCdEnum b : IssuerResponseCdEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IssuerResponseCdEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IssuerResponseCdEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IssuerResponseCdEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IssuerResponseCdEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ISSUER_RESPONSE_CD = "issuerResponseCd";
  @SerializedName(SERIALIZED_NAME_ISSUER_RESPONSE_CD)
  private IssuerResponseCdEnum issuerResponseCd;

  /**
   * Reject Reason Code.   Length: 1   Valid Values/Format: A - TRANSACTION AMOUNT MISSING/ILLEGIBLE, M - MERCHANT NAME MISSING/ILLEGIBLE, P - PRIMARY ACCOUNT NUMBER MISSING/ILLEGIBLE, D - TRANSACTION DATE MISSING/ILLEGIBLE, O - OTHER (it can also be used for NOT A SUBSTITUTE DRAFT
   */
  @JsonAdapter(RejectReasonCdEnum.Adapter.class)
  public enum RejectReasonCdEnum {
    A("A"),
    
    M("M"),
    
    P("P"),
    
    D("D"),
    
    O("O");

    private String value;

    RejectReasonCdEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RejectReasonCdEnum fromValue(String value) {
      for (RejectReasonCdEnum b : RejectReasonCdEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RejectReasonCdEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RejectReasonCdEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RejectReasonCdEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RejectReasonCdEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_REJECT_REASON_CD = "rejectReasonCd";
  @SerializedName(SERIALIZED_NAME_REJECT_REASON_CD)
  private RejectReasonCdEnum rejectReasonCd;


  public IssuerFulfillmentRequest memo(String memo) {
    
    this.memo = memo;
    return this;
  }

   /**
   * This is a test memo.   Length: 1-100   Valid Values/Format: Alphanumeric, Special Char (~!@#$%^&amp;*()_+{}|:\&quot;&lt;&gt;?,./;&#39;[]-&#x3D;)
   * @return memo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "This is a test memo", value = "This is a test memo.   Length: 1-100   Valid Values/Format: Alphanumeric, Special Char (~!@#$%^&*()_+{}|:\"<>?,./;'[]-=)")

  public String getMemo() {
    return memo;
  }


  public void setMemo(String memo) {
    this.memo = memo;
  }


  public IssuerFulfillmentRequest issuerResponseCd(IssuerResponseCdEnum issuerResponseCd) {
    
    this.issuerResponseCd = issuerResponseCd;
    return this;
  }

   /**
   * Issuer Response Code.   Length: 7-36   Valid Values/Format: APPROVE, REJECT_DOCUMENTATION_NOT_AS_REQUIRED, REJECT_ILLEGIBLE_OR_MISSING
   * @return issuerResponseCd
  **/
  @ApiModelProperty(example = "APPROVE", required = true, value = "Issuer Response Code.   Length: 7-36   Valid Values/Format: APPROVE, REJECT_DOCUMENTATION_NOT_AS_REQUIRED, REJECT_ILLEGIBLE_OR_MISSING")

  public IssuerResponseCdEnum getIssuerResponseCd() {
    return issuerResponseCd;
  }


  public void setIssuerResponseCd(IssuerResponseCdEnum issuerResponseCd) {
    this.issuerResponseCd = issuerResponseCd;
  }


  public IssuerFulfillmentRequest rejectReasonCd(RejectReasonCdEnum rejectReasonCd) {
    
    this.rejectReasonCd = rejectReasonCd;
    return this;
  }

   /**
   * Reject Reason Code.   Length: 1   Valid Values/Format: A - TRANSACTION AMOUNT MISSING/ILLEGIBLE, M - MERCHANT NAME MISSING/ILLEGIBLE, P - PRIMARY ACCOUNT NUMBER MISSING/ILLEGIBLE, D - TRANSACTION DATE MISSING/ILLEGIBLE, O - OTHER (it can also be used for NOT A SUBSTITUTE DRAFT
   * @return rejectReasonCd
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "A", value = "Reject Reason Code.   Length: 1   Valid Values/Format: A - TRANSACTION AMOUNT MISSING/ILLEGIBLE, M - MERCHANT NAME MISSING/ILLEGIBLE, P - PRIMARY ACCOUNT NUMBER MISSING/ILLEGIBLE, D - TRANSACTION DATE MISSING/ILLEGIBLE, O - OTHER (it can also be used for NOT A SUBSTITUTE DRAFT")

  public RejectReasonCdEnum getRejectReasonCd() {
    return rejectReasonCd;
  }


  public void setRejectReasonCd(RejectReasonCdEnum rejectReasonCd) {
    this.rejectReasonCd = rejectReasonCd;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IssuerFulfillmentRequest issuerFulfillmentRequest = (IssuerFulfillmentRequest) o;
    return Objects.equals(this.memo, issuerFulfillmentRequest.memo) &&
        Objects.equals(this.issuerResponseCd, issuerFulfillmentRequest.issuerResponseCd) &&
        Objects.equals(this.rejectReasonCd, issuerFulfillmentRequest.rejectReasonCd);
  }

  @Override
  public int hashCode() {
    return Objects.hash(memo, issuerResponseCd, rejectReasonCd);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IssuerFulfillmentRequest {\n");
    sb.append("    memo: ").append(toIndentedString(memo)).append("\n");
    sb.append("    issuerResponseCd: ").append(toIndentedString(issuerResponseCd)).append("\n");
    sb.append("    rejectReasonCd: ").append(toIndentedString(rejectReasonCd)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

